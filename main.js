/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MDMakerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultFileCount: 5,
  defaultBaseName: "\u30D5\u30A1\u30A4\u30EB",
  targetFolder: "/"
};
var MDMakerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("file-plus", "MD Maker", (evt) => {
      new MDMakerModal(this.app, this).open();
    });
    this.addCommand({
      id: "open-mdmaker-modal",
      name: "MD Maker\u3092\u958B\u304F",
      callback: () => {
        new MDMakerModal(this.app, this).open();
      }
    });
    this.addSettingTab(new MDMakerSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * 全角数字を半角数字に変換
   */
  convertFullwidthToHalfwidth(text) {
    const fullwidthDigits = "\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19";
    const halfwidthDigits = "0123456789";
    let result = text;
    for (let i = 0; i < fullwidthDigits.length; i++) {
      result = result.replace(new RegExp(fullwidthDigits[i], "g"), halfwidthDigits[i]);
    }
    return result;
  }
  /**
   * ファイルを作成する
   */
  async createFiles(folder, baseName, count) {
    const paddingWidth = count.toString().length;
    const created = [];
    const failed = [];
    for (let i = 1; i <= count; i++) {
      const fileName = `${baseName}(${i.toString().padStart(paddingWidth, "0")}).md`;
      const filePath = folder.path === "/" ? fileName : `${folder.path}/${fileName}`;
      try {
        const existingFile = this.app.vault.getAbstractFileByPath(filePath);
        if (existingFile) {
          failed.push(`${fileName} (\u65E2\u306B\u5B58\u5728)`);
          continue;
        }
        await this.app.vault.create(filePath, "");
        created.push(fileName);
      } catch (error) {
        failed.push(`${fileName} (\u30A8\u30E9\u30FC: ${error.message})`);
      }
    }
    return { created, failed };
  }
};
var MDMakerModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.baseName = plugin.settings.defaultBaseName;
    this.fileCount = plugin.settings.defaultFileCount;
    try {
      const targetFolderPath = plugin.settings.targetFolder || "/";
      if (targetFolderPath === "/") {
        this.selectedFolder = this.app.vault.getRoot();
      } else {
        const folder = this.app.vault.getAbstractFileByPath(targetFolderPath);
        this.selectedFolder = folder instanceof import_obsidian.TFolder ? folder : this.app.vault.getRoot();
      }
    } catch (error) {
      console.error("\u30BF\u30FC\u30B2\u30C3\u30C8\u30D5\u30A9\u30EB\u30C0\u306E\u53D6\u5F97\u306B\u5931\u6557:", error);
      this.selectedFolder = this.app.vault.getRoot();
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "MD Maker - \u8907\u6570\u30D5\u30A1\u30A4\u30EB\u4F5C\u6210" });
    new import_obsidian.Setting(contentEl).setName("\u4F5C\u6210\u5148\u30D5\u30A9\u30EB\u30C0").setDesc("\u30D5\u30A1\u30A4\u30EB\u3092\u4F5C\u6210\u3059\u308B\u30D5\u30A9\u30EB\u30C0\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044").addDropdown((dropdown) => {
      this.populateFolderDropdown(dropdown).catch((error) => {
        console.error("\u30D5\u30A9\u30EB\u30C0\u30C9\u30ED\u30C3\u30D7\u30C0\u30A6\u30F3\u306E\u8A2D\u5B9A\u306B\u5931\u6557:", error);
        dropdown.addOption("/", "\u30EB\u30FC\u30C8 (/)");
        dropdown.setValue("/");
      });
    });
    new import_obsidian.Setting(contentEl).setName("\u30D5\u30A1\u30A4\u30EB\u306E\u30D9\u30FC\u30B9\u540D").setDesc("\u4F5C\u6210\u3059\u308B\u30D5\u30A1\u30A4\u30EB\u306E\u57FA\u672C\u540D\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044").addText((text) => text.setPlaceholder("\u4F8B: \u30E1\u30E2").setValue(this.baseName).onChange((value) => {
      this.baseName = value;
    }));
    new import_obsidian.Setting(contentEl).setName("\u4F5C\u6210\u3059\u308B\u30D5\u30A1\u30A4\u30EB\u6570").setDesc("\u4F5C\u6210\u3059\u308B\u30D5\u30A1\u30A4\u30EB\u306E\u6570\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\uFF081-1000\uFF09").addText((text) => text.setPlaceholder("\u4F8B: 5").setValue(this.fileCount.toString()).onChange((value) => {
      const converted = this.plugin.convertFullwidthToHalfwidth(value);
      const num = parseInt(converted);
      if (!isNaN(num) && num > 0 && num <= 1e3) {
        this.fileCount = num;
      }
    }));
    const previewDiv = contentEl.createDiv();
    this.updatePreview(previewDiv);
    const buttonDiv = contentEl.createDiv({ cls: "modal-button-container" });
    buttonDiv.style.marginTop = "20px";
    buttonDiv.style.display = "flex";
    buttonDiv.style.gap = "10px";
    const createButton = buttonDiv.createEl("button", { text: "\u4F5C\u6210" });
    createButton.style.backgroundColor = "var(--interactive-accent)";
    createButton.style.color = "var(--text-on-accent)";
    createButton.addEventListener("click", async () => {
      await this.createFiles();
    });
    const cancelButton = buttonDiv.createEl("button", { text: "\u30AD\u30E3\u30F3\u30BB\u30EB" });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
    const updatePreview = () => this.updatePreview(previewDiv);
    contentEl.addEventListener("input", updatePreview);
  }
  updatePreview(container) {
    container.empty();
    if (!this.baseName.trim() || this.fileCount <= 0) {
      return;
    }
    const previewTitle = container.createEl("h3", { text: "\u30D7\u30EC\u30D3\u30E5\u30FC" });
    previewTitle.style.marginTop = "20px";
    const paddingWidth = this.fileCount.toString().length;
    const maxPreview = Math.min(this.fileCount, 5);
    for (let i = 1; i <= maxPreview; i++) {
      const fileName = `${this.baseName}(${i.toString().padStart(paddingWidth, "0")}).md`;
      const fileDiv = container.createDiv();
      fileDiv.style.fontFamily = "monospace";
      fileDiv.style.fontSize = "0.9em";
      fileDiv.style.padding = "2px 0";
      fileDiv.textContent = fileName;
    }
    if (this.fileCount > 5) {
      const moreDiv = container.createDiv();
      moreDiv.style.fontStyle = "italic";
      moreDiv.style.color = "var(--text-muted)";
      moreDiv.textContent = `... \u3042\u3068${this.fileCount - 5}\u500B\u306E\u30D5\u30A1\u30A4\u30EB`;
    }
  }
  async createFiles() {
    if (!this.baseName.trim()) {
      new import_obsidian.Notice("\u30D5\u30A1\u30A4\u30EB\u540D\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
      return;
    }
    if (this.fileCount <= 0 || this.fileCount > 1e3) {
      new import_obsidian.Notice("\u30D5\u30A1\u30A4\u30EB\u6570\u306F1\u304B\u30891000\u306E\u9593\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
      return;
    }
    try {
      const result = await this.plugin.createFiles(this.selectedFolder, this.baseName.trim(), this.fileCount);
      if (result.created.length > 0) {
        new import_obsidian.Notice(`${result.created.length}\u500B\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u4F5C\u6210\u3057\u307E\u3057\u305F`);
      }
      if (result.failed.length > 0) {
        new import_obsidian.Notice(`${result.failed.length}\u500B\u306E\u30D5\u30A1\u30A4\u30EB\u306E\u4F5C\u6210\u306B\u5931\u6557\u3057\u307E\u3057\u305F`);
        console.warn("\u4F5C\u6210\u306B\u5931\u6557\u3057\u305F\u30D5\u30A1\u30A4\u30EB:", result.failed);
      }
      this.close();
    } catch (error) {
      new import_obsidian.Notice("\u30D5\u30A1\u30A4\u30EB\u4F5C\u6210\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
      console.error("File creation error:", error);
    }
  }
  async populateFolderDropdown(dropdown) {
    var _a;
    try {
      dropdown.addOption("/", "\u30EB\u30FC\u30C8 (/)");
      const allFiles = this.app.vault.getAllLoadedFiles();
      console.log("\u5168\u30D5\u30A1\u30A4\u30EB\u6570:", allFiles.length);
      let folders = allFiles.filter((file) => file instanceof import_obsidian.TFolder).map((folder) => folder).sort((a, b) => a.path.localeCompare(b.path));
      console.log("getAllLoadedFiles \u30D5\u30A9\u30EB\u30C0\u6570:", folders.length);
      if (folders.length === 0) {
        try {
          const rootContents = await this.app.vault.adapter.list("/");
          console.log("adapter.list\u7D50\u679C:", rootContents);
          const findFoldersRecursively = async (path) => {
            const foundFolders = [];
            try {
              const contents = await this.app.vault.adapter.list(path);
              for (const folderPath of contents.folders) {
                const folder = this.app.vault.getAbstractFileByPath(folderPath);
                if (folder instanceof import_obsidian.TFolder) {
                  foundFolders.push(folder);
                  const subFolders = await findFoldersRecursively(folderPath);
                  foundFolders.push(...subFolders);
                }
              }
            } catch (e) {
              console.warn(`\u30D5\u30A9\u30EB\u30C0 ${path} \u306E\u8AAD\u307F\u53D6\u308A\u306B\u5931\u6557:`, e);
            }
            return foundFolders;
          };
          folders = await findFoldersRecursively("/");
        } catch (adapterError) {
          console.warn("adapter.list\u3067\u30A8\u30E9\u30FC:", adapterError);
        }
      }
      console.log("\u6700\u7D42\u30D5\u30A9\u30EB\u30C0\u6570:", folders.length);
      console.log("\u30D5\u30A9\u30EB\u30C0\u30EA\u30B9\u30C8:", folders.map((f) => f.path));
      folders.forEach((folder) => {
        if (folder.path !== "/" && folder.path !== "") {
          dropdown.addOption(folder.path, folder.path);
        }
      });
      const currentPath = ((_a = this.selectedFolder) == null ? void 0 : _a.path) || "/";
      dropdown.setValue(currentPath);
      dropdown.onChange((value) => {
        try {
          this.selectedFolder = value === "/" ? this.app.vault.getRoot() : this.app.vault.getAbstractFileByPath(value);
          console.log("\u30D5\u30A9\u30EB\u30C0\u9078\u629E\u5909\u66F4:", value, this.selectedFolder);
        } catch (error) {
          console.error("\u30D5\u30A9\u30EB\u30C0\u9078\u629E\u30A8\u30E9\u30FC:", error);
          this.selectedFolder = this.app.vault.getRoot();
        }
      });
    } catch (error) {
      console.error("\u30D5\u30A9\u30EB\u30C0\u30C9\u30ED\u30C3\u30D7\u30C0\u30A6\u30F3\u4F5C\u6210\u30A8\u30E9\u30FC:", error);
      dropdown.addOption("/", "\u30EB\u30FC\u30C8 (/)");
      dropdown.setValue("/");
      this.selectedFolder = this.app.vault.getRoot();
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MDMakerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "MD Maker \u8A2D\u5B9A" });
    new import_obsidian.Setting(containerEl).setName("\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u30D9\u30FC\u30B9\u540D").setDesc("\u30D5\u30A1\u30A4\u30EB\u4F5C\u6210\u6642\u306E\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u30D9\u30FC\u30B9\u540D").addText((text) => text.setPlaceholder("\u30D5\u30A1\u30A4\u30EB").setValue(this.plugin.settings.defaultBaseName).onChange(async (value) => {
      this.plugin.settings.defaultBaseName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u30D5\u30A1\u30A4\u30EB\u6570").setDesc("\u30D5\u30A1\u30A4\u30EB\u4F5C\u6210\u6642\u306E\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u30D5\u30A1\u30A4\u30EB\u6570").addText((text) => text.setPlaceholder("5").setValue(this.plugin.settings.defaultFileCount.toString()).onChange(async (value) => {
      const num = parseInt(value);
      if (!isNaN(num) && num > 0 && num <= 1e3) {
        this.plugin.settings.defaultFileCount = num;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u4F5C\u6210\u5148\u30D5\u30A9\u30EB\u30C0").setDesc("\u30D5\u30A1\u30A4\u30EB\u3092\u4F5C\u6210\u3059\u308B\u30C7\u30D5\u30A9\u30EB\u30C8\u30D5\u30A9\u30EB\u30C0\u3092\u9078\u629E\u3057\u307E\u3059").addDropdown(async (dropdown) => {
      await this.populateFolderDropdown(dropdown);
    });
    containerEl.createEl("hr", { cls: "setting-separator" });
    const quickCreateSection = containerEl.createDiv({ cls: "mdmaker-quick-create" });
    quickCreateSection.createEl("h3", { text: "\u30AF\u30A4\u30C3\u30AF\u4F5C\u6210" });
    quickCreateSection.createEl("p", {
      text: "\u8A2D\u5B9A\u3055\u308C\u305F\u5024\u3067\u5373\u5EA7\u306B\u30D5\u30A1\u30A4\u30EB\u3092\u4F5C\u6210\u3067\u304D\u307E\u3059\u3002\u8A73\u7D30\u306A\u8A2D\u5B9A\u304C\u5FC5\u8981\u306A\u5834\u5408\u306F\u3001\u30EA\u30DC\u30F3\u30A2\u30A4\u30B3\u30F3\u307E\u305F\u306F\u30B3\u30DE\u30F3\u30C9\u30D1\u30EC\u30C3\u30C8\u304B\u3089\u300CMD Maker\u3092\u958B\u304F\u300D\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044\u3002"
    });
    const buttonDescription = quickCreateSection.createDiv({ cls: "mdmaker-button-description" });
    buttonDescription.textContent = `\u300C${this.plugin.settings.defaultBaseName}\u300D\u3092${this.plugin.settings.defaultFileCount}\u500B\u4F5C\u6210\u3057\u307E\u3059`;
    const buttonContainer = quickCreateSection.createDiv();
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "center";
    buttonContainer.style.marginTop = "10px";
    const createButton = buttonContainer.createEl("button", {
      text: "\u4ECA\u3059\u3050\u4F5C\u6210",
      cls: "mdmaker-create-button-settings"
    });
    createButton.addEventListener("click", async () => {
      await this.quickCreateFiles();
    });
  }
  async populateFolderDropdown(dropdown) {
    try {
      dropdown.addOption("/", "\u30EB\u30FC\u30C8 (/)");
      const allFiles = this.app.vault.getAllLoadedFiles();
      const folders = allFiles.filter((file) => file instanceof import_obsidian.TFolder).map((folder) => folder).sort((a, b) => a.path.localeCompare(b.path));
      folders.forEach((folder) => {
        if (folder.path !== "/" && folder.path !== "") {
          dropdown.addOption(folder.path, folder.path);
        }
      });
      dropdown.setValue(this.plugin.settings.targetFolder);
      dropdown.onChange(async (value) => {
        this.plugin.settings.targetFolder = value;
        await this.plugin.saveSettings();
        this.display();
      });
    } catch (error) {
      console.error("\u30D5\u30A9\u30EB\u30C0\u30C9\u30ED\u30C3\u30D7\u30C0\u30A6\u30F3\u306E\u4F5C\u6210\u30A8\u30E9\u30FC:", error);
      dropdown.addOption("/", "\u30EB\u30FC\u30C8 (/)");
      dropdown.setValue("/");
    }
  }
  async quickCreateFiles() {
    try {
      let targetFolder;
      const targetPath = this.plugin.settings.targetFolder;
      if (targetPath === "/") {
        targetFolder = this.app.vault.getRoot();
      } else {
        const folder = this.app.vault.getAbstractFileByPath(targetPath);
        if (folder instanceof import_obsidian.TFolder) {
          targetFolder = folder;
        } else {
          new import_obsidian.Notice("\u6307\u5B9A\u3055\u308C\u305F\u30D5\u30A9\u30EB\u30C0\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002\u30EB\u30FC\u30C8\u30D5\u30A9\u30EB\u30C0\u306B\u4F5C\u6210\u3057\u307E\u3059\u3002");
          targetFolder = this.app.vault.getRoot();
        }
      }
      const result = await this.plugin.createFiles(
        targetFolder,
        this.plugin.settings.defaultBaseName,
        this.plugin.settings.defaultFileCount
      );
      if (result.created.length > 0) {
        new import_obsidian.Notice(`${result.created.length}\u500B\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u4F5C\u6210\u3057\u307E\u3057\u305F`);
      }
      if (result.failed.length > 0) {
        new import_obsidian.Notice(`${result.failed.length}\u500B\u306E\u30D5\u30A1\u30A4\u30EB\u306E\u4F5C\u6210\u306B\u5931\u6557\u3057\u307E\u3057\u305F`);
        console.warn("\u4F5C\u6210\u306B\u5931\u6557\u3057\u305F\u30D5\u30A1\u30A4\u30EB:", result.failed);
      }
    } catch (error) {
      new import_obsidian.Notice("\u30D5\u30A1\u30A4\u30EB\u4F5C\u6210\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
      console.error("Quick file creation error:", error);
    }
  }
};
